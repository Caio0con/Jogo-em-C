

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Jun 05 20:35:38 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 17/10/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     
    57                           	psect	idataCOMRAM
    58   000B26                     __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _data3
    62   000B26  01                 	db	1
    63   000B27  03                 	db	3
    64   000B28  05                 	db	5
    65   000B29  09                 	db	9
    66   000B2A  09                 	db	9
    67   000B2B  0B                 	db	11
    68   000B2C  1B                 	db	27
    69   000B2D  18                 	db	24
    70                           
    71                           ;initializer for _data2
    72   000B2E  0C                 	db	12
    73   000B2F  12                 	db	18
    74   000B30  01                 	db	1
    75   000B31  02                 	db	2
    76   000B32  04                 	db	4
    77   000B33  08                 	db	8
    78   000B34  00                 	db	0
    79   000B35  08                 	db	8
    80                           
    81                           ;initializer for _data1
    82   000B36  0A                 	db	10
    83   000B37  15                 	db	21
    84   000B38  11                 	db	17
    85   000B39  11                 	db	17
    86   000B3A  11                 	db	17
    87   000B3B  0A                 	db	10
    88   000B3C  04                 	db	4
    89   000B3D  00                 	db	0
    90   000000                     _PORTD	set	3971
    91   000000                     _TRISD	set	3989
    92   000000                     _TRISB0	set	31896
    93   000000                     _ADCON1	set	4033
    94   000000                     _TRISE	set	3990
    95   000000                     _PORTEbits	set	3972
    96                           
    97                           ; #config settings
    98                           
    99                           	psect	cinit
   100   000B00                     __pcinit:
   101                           	callstack 0
   102   000B00                     start_initialization:
   103                           	callstack 0
   104   000B00                     __initialization:
   105                           	callstack 0
   106                           
   107                           ; Initialize objects allocated to COMRAM (24 bytes)
   108                           ; load TBLPTR registers with __pidataCOMRAM
   109   000B00  0E26               	movlw	low __pidataCOMRAM
   110   000B02  6EF6               	movwf	tblptrl,c
   111   000B04  0E0B               	movlw	high __pidataCOMRAM
   112   000B06  6EF7               	movwf	tblptrh,c
   113   000B08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   114   000B0A  6EF8               	movwf	tblptru,c
   115   000B0C  EE00  F001         	lfsr	0,__pdataCOMRAM
   116   000B10  EE10 F018          	lfsr	1,24
   117   000B14                     copy_data0:
   118   000B14  0009               	tblrd		*+
   119   000B16  CFF5 FFEE          	movff	tablat,postinc0
   120   000B1A  50E5               	movf	postdec1,w,c
   121   000B1C  50E1               	movf	fsr1l,w,c
   122   000B1E  E1FA               	bnz	copy_data0
   123   000B20                     end_of_initialization:
   124                           	callstack 0
   125   000B20                     __end_of__initialization:
   126                           	callstack 0
   127   000B20  0100               	movlb	0
   128   000B22  EF01  F004         	goto	_main	;jump to C main() function
   129                           
   130                           	psect	dataCOMRAM
   131   000001                     __pdataCOMRAM:
   132                           	callstack 0
   133   000001                     _data3:
   134                           	callstack 0
   135   000001                     	ds	8
   136   000009                     _data2:
   137                           	callstack 0
   138   000009                     	ds	8
   139   000011                     _data1:
   140                           	callstack 0
   141   000011                     	ds	8
   142                           
   143                           	psect	cstackCOMRAM
   144   000019                     __pcstackCOMRAM:
   145                           	callstack 0
   146   000019                     ?___awdiv:
   147                           	callstack 0
   148   000019                     lcd_wr@val:
   149                           	callstack 0
   150   000019                     atraso_ms@valor:
   151                           	callstack 0
   152   000019                     ___awdiv@dividend:
   153                           	callstack 0
   154                           
   155                           ; 2 bytes @ 0x0
   156   000019                     	ds	2
   157   00001B                     atraso_ms@i:
   158                           	callstack 0
   159   00001B                     ___awdiv@divisor:
   160                           	callstack 0
   161                           
   162                           ; 2 bytes @ 0x2
   163   00001B                     	ds	2
   164   00001D                     atraso_ms@j:
   165                           	callstack 0
   166   00001D                     ___awdiv@counter:
   167                           	callstack 0
   168                           
   169                           ; 1 bytes @ 0x4
   170   00001D                     	ds	1
   171   00001E                     lcd_cmd@val:
   172                           	callstack 0
   173   00001E                     lcd_dat@val:
   174                           	callstack 0
   175   00001E                     ___awdiv@sign:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0x5
   179   00001E                     	ds	1
   180   00001F                     ___awdiv@quotient:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x6
   184   00001F                     	ds	2
   185   000021                     special_char@lcd_loc:
   186                           	callstack 0
   187                           
   188                           ; 1 bytes @ 0x8
   189   000021                     	ds	1
   190   000022                     special_char@data:
   191                           	callstack 0
   192                           
   193                           ; 1 bytes @ 0x9
   194   000022                     	ds	1
   195   000023                     special_char@cgram_loc:
   196                           	callstack 0
   197                           
   198                           ; 1 bytes @ 0xA
   199   000023                     	ds	1
   200   000024                     special_char@j:
   201                           	callstack 0
   202                           
   203                           ; 2 bytes @ 0xB
   204   000024                     	ds	2
   205   000026                     
   206                           ; 1 bytes @ 0xD
   207 ;;
   208 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   209 ;;
   210 ;; *************** function _main *****************
   211 ;; Defined at:
   212 ;;		line 24 in file "../../../Documents/P2/AULAPICSIM4-4/Aula_LCD.c"
   213 ;; Parameters:    Size  Location     Type
   214 ;;		None
   215 ;; Auto vars:     Size  Location     Type
   216 ;;		None
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   226 ;;      Params:         0       0       0       0       0       0       0       0       0
   227 ;;      Locals:         0       0       0       0       0       0       0       0       0
   228 ;;      Temps:          0       0       0       0       0       0       0       0       0
   229 ;;      Totals:         0       0       0       0       0       0       0       0       0
   230 ;;Total ram usage:        0 bytes
   231 ;; Hardware stack levels required when called: 3
   232 ;; This function calls:
   233 ;;		_atraso_ms
   234 ;;		_lcd_cmd
   235 ;;		_lcd_init
   236 ;;		_special_char
   237 ;; This function is called by:
   238 ;;		Startup code after reset
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242                           	psect	text0
   243   000802                     __ptext0:
   244                           	callstack 0
   245   000802                     _main:
   246                           	callstack 28
   247   000802                     
   248                           ;Aula_LCD.c: 26: TRISD=0x00;
   249   000802  0E00               	movlw	0
   250   000804  6E95               	movwf	149,c	;volatile
   251                           
   252                           ;Aula_LCD.c: 27: TRISE=0x00;
   253   000806  0E00               	movlw	0
   254   000808  6E96               	movwf	150,c	;volatile
   255   00080A                     
   256                           ;Aula_LCD.c: 28: TRISB0 = 1;
   257   00080A  8093               	bsf	3987,0,c	;volatile
   258                           
   259                           ;Aula_LCD.c: 29: ADCON1 = 0x0F;
   260   00080C  0E0F               	movlw	15
   261   00080E  6EC1               	movwf	193,c	;volatile
   262   000810                     
   263                           ;Aula_LCD.c: 30: lcd_init();
   264   000810  EC04  F005         	call	_lcd_init	;wreg free
   265   000814                     
   266                           ;Aula_LCD.c: 31: lcd_cmd(0x0C);
   267   000814  0E0C               	movlw	12
   268   000816  EC6B  F005         	call	_lcd_cmd
   269   00081A                     
   270                           ;Aula_LCD.c: 32: lcd_cmd(0x01);
   271   00081A  0E01               	movlw	1
   272   00081C  EC6B  F005         	call	_lcd_cmd
   273   000820                     l1154:
   274                           
   275                           ;Aula_LCD.c: 35: special_char(64,0x82,data1);
   276   000820  0E82               	movlw	130
   277   000822  6E21               	movwf	special_char@lcd_loc^0,c
   278   000824  0E11               	movlw	low _data1
   279   000826  6E22               	movwf	special_char@data^0,c
   280   000828  0E40               	movlw	64
   281   00082A  ECD3  F004         	call	_special_char
   282   00082E                     
   283                           ;Aula_LCD.c: 37: atraso_ms(1000);
   284   00082E  0E03               	movlw	3
   285   000830  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   286   000832  0EE8               	movlw	232
   287   000834  6E19               	movwf	atraso_ms@valor^0,c
   288   000836  EC32  F005         	call	_atraso_ms	;wreg free
   289   00083A                     
   290                           ;Aula_LCD.c: 38: special_char(72,0x84,data2);
   291   00083A  0E84               	movlw	132
   292   00083C  6E21               	movwf	special_char@lcd_loc^0,c
   293   00083E  0E09               	movlw	low _data2
   294   000840  6E22               	movwf	special_char@data^0,c
   295   000842  0E48               	movlw	72
   296   000844  ECD3  F004         	call	_special_char
   297   000848                     
   298                           ;Aula_LCD.c: 39: atraso_ms(1000);
   299   000848  0E03               	movlw	3
   300   00084A  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   301   00084C  0EE8               	movlw	232
   302   00084E  6E19               	movwf	atraso_ms@valor^0,c
   303   000850  EC32  F005         	call	_atraso_ms	;wreg free
   304   000854                     
   305                           ;Aula_LCD.c: 40: special_char(80,0x86,data3);
   306   000854  0E86               	movlw	134
   307   000856  6E21               	movwf	special_char@lcd_loc^0,c
   308   000858  0E01               	movlw	low _data3
   309   00085A  6E22               	movwf	special_char@data^0,c
   310   00085C  0E50               	movlw	80
   311   00085E  ECD3  F004         	call	_special_char
   312   000862                     
   313                           ;Aula_LCD.c: 41: atraso_ms(5000);
   314   000862  0E13               	movlw	19
   315   000864  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   316   000866  0E88               	movlw	136
   317   000868  6E19               	movwf	atraso_ms@valor^0,c
   318   00086A  EC32  F005         	call	_atraso_ms	;wreg free
   319   00086E                     
   320                           ;Aula_LCD.c: 45: lcd_cmd(0x01);
   321   00086E  0E01               	movlw	1
   322   000870  EC6B  F005         	call	_lcd_cmd
   323   000874                     
   324                           ;Aula_LCD.c: 46: atraso_ms(100);
   325   000874  0E00               	movlw	0
   326   000876  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   327   000878  0E64               	movlw	100
   328   00087A  6E19               	movwf	atraso_ms@valor^0,c
   329   00087C  EC32  F005         	call	_atraso_ms	;wreg free
   330   000880                     
   331                           ;Aula_LCD.c: 47: special_char(64,0xc2,data1);
   332   000880  0EC2               	movlw	194
   333   000882  6E21               	movwf	special_char@lcd_loc^0,c
   334   000884  0E11               	movlw	low _data1
   335   000886  6E22               	movwf	special_char@data^0,c
   336   000888  0E40               	movlw	64
   337   00088A  ECD3  F004         	call	_special_char
   338   00088E                     
   339                           ;Aula_LCD.c: 49: atraso_ms(1000);
   340   00088E  0E03               	movlw	3
   341   000890  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   342   000892  0EE8               	movlw	232
   343   000894  6E19               	movwf	atraso_ms@valor^0,c
   344   000896  EC32  F005         	call	_atraso_ms	;wreg free
   345   00089A                     
   346                           ;Aula_LCD.c: 50: special_char(72,0xc4,data2);
   347   00089A  0EC4               	movlw	196
   348   00089C  6E21               	movwf	special_char@lcd_loc^0,c
   349   00089E  0E09               	movlw	low _data2
   350   0008A0  6E22               	movwf	special_char@data^0,c
   351   0008A2  0E48               	movlw	72
   352   0008A4  ECD3  F004         	call	_special_char
   353   0008A8                     
   354                           ;Aula_LCD.c: 51: atraso_ms(1000);
   355   0008A8  0E03               	movlw	3
   356   0008AA  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   357   0008AC  0EE8               	movlw	232
   358   0008AE  6E19               	movwf	atraso_ms@valor^0,c
   359   0008B0  EC32  F005         	call	_atraso_ms	;wreg free
   360   0008B4                     
   361                           ;Aula_LCD.c: 52: special_char(80,0xc6,data3);
   362   0008B4  0EC6               	movlw	198
   363   0008B6  6E21               	movwf	special_char@lcd_loc^0,c
   364   0008B8  0E01               	movlw	low _data3
   365   0008BA  6E22               	movwf	special_char@data^0,c
   366   0008BC  0E50               	movlw	80
   367   0008BE  ECD3  F004         	call	_special_char
   368   0008C2                     
   369                           ;Aula_LCD.c: 53: atraso_ms(5000);
   370   0008C2  0E13               	movlw	19
   371   0008C4  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   372   0008C6  0E88               	movlw	136
   373   0008C8  6E19               	movwf	atraso_ms@valor^0,c
   374   0008CA  EC32  F005         	call	_atraso_ms	;wreg free
   375   0008CE                     
   376                           ;Aula_LCD.c: 54: lcd_cmd(0xC0);
   377   0008CE  0EC0               	movlw	192
   378   0008D0  EC6B  F005         	call	_lcd_cmd
   379   0008D4                     
   380                           ;Aula_LCD.c: 56: lcd_cmd(0x01);
   381   0008D4  0E01               	movlw	1
   382   0008D6  EC6B  F005         	call	_lcd_cmd
   383   0008DA  EF10  F004         	goto	l1154
   384   0008DE  EF00  F000         	goto	start
   385   0008E2                     __end_of_main:
   386                           	callstack 0
   387                           
   388 ;; *************** function _special_char *****************
   389 ;; Defined at:
   390 ;;		line 11 in file "../../../Documents/P2/AULAPICSIM4-4/Aula_LCD.c"
   391 ;; Parameters:    Size  Location     Type
   392 ;;  cgram_loc       1    wreg     unsigned char 
   393 ;;  lcd_loc         1    8[COMRAM] unsigned char 
   394 ;;  data            1    9[COMRAM] PTR unsigned char 
   395 ;;		 -> data3(8), data2(8), data1(8), 
   396 ;; Auto vars:     Size  Location     Type
   397 ;;  cgram_loc       1   10[COMRAM] unsigned char 
   398 ;;  j               2   11[COMRAM] unsigned int 
   399 ;; Return value:  Size  Location     Type
   400 ;;                  1    wreg      void 
   401 ;; Registers used:
   402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   408 ;;      Params:         2       0       0       0       0       0       0       0       0
   409 ;;      Locals:         3       0       0       0       0       0       0       0       0
   410 ;;      Temps:          0       0       0       0       0       0       0       0       0
   411 ;;      Totals:         5       0       0       0       0       0       0       0       0
   412 ;;Total ram usage:        5 bytes
   413 ;; Hardware stack levels used: 1
   414 ;; Hardware stack levels required when called: 2
   415 ;; This function calls:
   416 ;;		___awdiv
   417 ;;		_lcd_cmd
   418 ;;		_lcd_dat
   419 ;; This function is called by:
   420 ;;		_main
   421 ;; This function uses a non-reentrant model
   422 ;;
   423                           
   424                           	psect	text1
   425   0009A6                     __ptext1:
   426                           	callstack 0
   427   0009A6                     _special_char:
   428                           	callstack 28
   429                           
   430                           ;incstack = 0
   431                           ;special_char@cgram_loc stored from wreg
   432   0009A6  6E23               	movwf	special_char@cgram_loc^0,c
   433   0009A8                     
   434                           ;Aula_LCD.c: 13: unsigned int j=0;
   435   0009A8  0E00               	movlw	0
   436   0009AA  6E25               	movwf	(special_char@j+1)^0,c
   437   0009AC  0E00               	movlw	0
   438   0009AE  6E24               	movwf	special_char@j^0,c
   439   0009B0                     
   440                           ;Aula_LCD.c: 14: lcd_cmd(cgram_loc);
   441   0009B0  5023               	movf	special_char@cgram_loc^0,w,c
   442   0009B2  EC6B  F005         	call	_lcd_cmd
   443                           
   444                           ;Aula_LCD.c: 15: while(j<8)
   445   0009B6  EFE6  F004         	goto	l1140
   446   0009BA                     l1136:
   447                           
   448                           ;Aula_LCD.c: 16: {;Aula_LCD.c: 17: lcd_dat(data[j]);
   449   0009BA  5022               	movf	special_char@data^0,w,c
   450   0009BC  2424               	addwf	special_char@j^0,w,c
   451   0009BE  6ED9               	movwf	fsr2l,c
   452   0009C0  6ADA               	clrf	fsr2h,c
   453   0009C2  50DF               	movf	indf2,w,c
   454   0009C4  EC56  F005         	call	_lcd_dat
   455   0009C8                     
   456                           ;Aula_LCD.c: 18: j++;
   457   0009C8  4A24               	infsnz	special_char@j^0,f,c
   458   0009CA  2A25               	incf	(special_char@j+1)^0,f,c
   459   0009CC                     l1140:
   460   0009CC  5025               	movf	(special_char@j+1)^0,w,c
   461   0009CE  E109               	bnz	u210
   462   0009D0  0E08               	movlw	8
   463   0009D2  5C24               	subwf	special_char@j^0,w,c
   464   0009D4  A0D8               	btfss	status,0,c
   465   0009D6  EFEF  F004         	goto	u211
   466   0009DA  EFF1  F004         	goto	u210
   467   0009DE                     u211:
   468   0009DE  EFDD  F004         	goto	l1136
   469   0009E2                     u210:
   470   0009E2                     
   471                           ;Aula_LCD.c: 19: };Aula_LCD.c: 20: lcd_cmd(lcd_loc);
   472   0009E2  5021               	movf	special_char@lcd_loc^0,w,c
   473   0009E4  EC6B  F005         	call	_lcd_cmd
   474                           
   475                           ;Aula_LCD.c: 21: lcd_dat((cgram_loc-64)/8);
   476   0009E8  0EC0               	movlw	192
   477   0009EA  2423               	addwf	special_char@cgram_loc^0,w,c
   478   0009EC  6E19               	movwf	___awdiv@dividend^0,c
   479   0009EE  6A1A               	clrf	(___awdiv@dividend+1)^0,c
   480   0009F0  0EFF               	movlw	255
   481   0009F2  221A               	addwfc	(___awdiv@dividend+1)^0,f,c
   482   0009F4  0E00               	movlw	0
   483   0009F6  6E1C               	movwf	(___awdiv@divisor+1)^0,c
   484   0009F8  0E08               	movlw	8
   485   0009FA  6E1B               	movwf	___awdiv@divisor^0,c
   486   0009FC  EC71  F004         	call	___awdiv	;wreg free
   487   000A00  5019               	movf	?___awdiv^0,w,c
   488   000A02  EC56  F005         	call	_lcd_dat
   489   000A06  0012               	return		;funcret
   490   000A08                     __end_of_special_char:
   491                           	callstack 0
   492                           
   493 ;; *************** function _lcd_dat *****************
   494 ;; Defined at:
   495 ;;		line 46 in file "../../../Documents/P2/AULAPICSIM4-4/lcd.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;  val             1    wreg     unsigned char 
   498 ;; Auto vars:     Size  Location     Type
   499 ;;  val             1    5[COMRAM] unsigned char 
   500 ;; Return value:  Size  Location     Type
   501 ;;                  1    wreg      void 
   502 ;; Registers used:
   503 ;;		wreg, status,2, status,0, cstack
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   509 ;;      Params:         0       0       0       0       0       0       0       0       0
   510 ;;      Locals:         1       0       0       0       0       0       0       0       0
   511 ;;      Temps:          0       0       0       0       0       0       0       0       0
   512 ;;      Totals:         1       0       0       0       0       0       0       0       0
   513 ;;Total ram usage:        1 bytes
   514 ;; Hardware stack levels used: 1
   515 ;; Hardware stack levels required when called: 1
   516 ;; This function calls:
   517 ;;		_atraso_ms
   518 ;;		_lcd_wr
   519 ;; This function is called by:
   520 ;;		_special_char
   521 ;;		_lcd_str
   522 ;; This function uses a non-reentrant model
   523 ;;
   524                           
   525                           	psect	text2
   526   000AAC                     __ptext2:
   527                           	callstack 0
   528   000AAC                     _lcd_dat:
   529                           	callstack 28
   530                           
   531                           ;incstack = 0
   532                           ;lcd_dat@val stored from wreg
   533   000AAC  6E1E               	movwf	lcd_dat@val^0,c
   534   000AAE                     
   535                           ;lcd.c: 48: PORTEbits.RE1=1;
   536   000AAE  8284               	bsf	132,1,c	;volatile
   537   000AB0                     
   538                           ;lcd.c: 49: lcd_wr(val);
   539   000AB0  501E               	movf	lcd_dat@val^0,w,c
   540   000AB2  EC9F  F005         	call	_lcd_wr
   541   000AB6                     
   542                           ;lcd.c: 50: PORTEbits.RE2=1;
   543   000AB6  8484               	bsf	132,2,c	;volatile
   544   000AB8                     
   545                           ;lcd.c: 51: atraso_ms(3);
   546   000AB8  0E00               	movlw	0
   547   000ABA  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   548   000ABC  0E03               	movlw	3
   549   000ABE  6E19               	movwf	atraso_ms@valor^0,c
   550   000AC0  EC32  F005         	call	_atraso_ms	;wreg free
   551   000AC4                     
   552                           ;lcd.c: 52: PORTEbits.RE1=0;
   553   000AC4  9284               	bcf	132,1,c	;volatile
   554   000AC6                     
   555                           ;lcd.c: 53: atraso_ms(3);
   556   000AC6  0E00               	movlw	0
   557   000AC8  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   558   000ACA  0E03               	movlw	3
   559   000ACC  6E19               	movwf	atraso_ms@valor^0,c
   560   000ACE  EC32  F005         	call	_atraso_ms	;wreg free
   561   000AD2                     
   562                           ;lcd.c: 54: PORTEbits.RE1=1;
   563   000AD2  8284               	bsf	132,1,c	;volatile
   564   000AD4  0012               	return		;funcret
   565   000AD6                     __end_of_lcd_dat:
   566                           	callstack 0
   567                           
   568 ;; *************** function ___awdiv *****************
   569 ;; Defined at:
   570 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c90\common\awdiv.c"
   571 ;; Parameters:    Size  Location     Type
   572 ;;  dividend        2    0[COMRAM] int 
   573 ;;  divisor         2    2[COMRAM] int 
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  quotient        2    6[COMRAM] int 
   576 ;;  sign            1    5[COMRAM] unsigned char 
   577 ;;  counter         1    4[COMRAM] unsigned char 
   578 ;; Return value:  Size  Location     Type
   579 ;;                  2    0[COMRAM] int 
   580 ;; Registers used:
   581 ;;		wreg, status,2, status,0
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   587 ;;      Params:         4       0       0       0       0       0       0       0       0
   588 ;;      Locals:         4       0       0       0       0       0       0       0       0
   589 ;;      Temps:          0       0       0       0       0       0       0       0       0
   590 ;;      Totals:         8       0       0       0       0       0       0       0       0
   591 ;;Total ram usage:        8 bytes
   592 ;; Hardware stack levels used: 1
   593 ;; This function calls:
   594 ;;		Nothing
   595 ;; This function is called by:
   596 ;;		_special_char
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           	psect	text3
   601   0008E2                     __ptext3:
   602                           	callstack 0
   603   0008E2                     ___awdiv:
   604                           	callstack 29
   605   0008E2  0E00               	movlw	0
   606   0008E4  6E1E               	movwf	___awdiv@sign^0,c
   607   0008E6  BE1C               	btfsc	(___awdiv@divisor+1)^0,7,c
   608   0008E8  EF7A  F004         	goto	u130
   609   0008EC  EF78  F004         	goto	u131
   610   0008F0                     u131:
   611   0008F0  EF80  F004         	goto	l1028
   612   0008F4                     u130:
   613   0008F4  6C1B               	negf	___awdiv@divisor^0,c
   614   0008F6  1E1C               	comf	(___awdiv@divisor+1)^0,f,c
   615   0008F8  B0D8               	btfsc	status,0,c
   616   0008FA  2A1C               	incf	(___awdiv@divisor+1)^0,f,c
   617   0008FC  0E01               	movlw	1
   618   0008FE  6E1E               	movwf	___awdiv@sign^0,c
   619   000900                     l1028:
   620   000900  BE1A               	btfsc	(___awdiv@dividend+1)^0,7,c
   621   000902  EF87  F004         	goto	u140
   622   000906  EF85  F004         	goto	u141
   623   00090A                     u141:
   624   00090A  EF8D  F004         	goto	l1034
   625   00090E                     u140:
   626   00090E  6C19               	negf	___awdiv@dividend^0,c
   627   000910  1E1A               	comf	(___awdiv@dividend+1)^0,f,c
   628   000912  B0D8               	btfsc	status,0,c
   629   000914  2A1A               	incf	(___awdiv@dividend+1)^0,f,c
   630   000916  0E01               	movlw	1
   631   000918  1A1E               	xorwf	___awdiv@sign^0,f,c
   632   00091A                     l1034:
   633   00091A  0E00               	movlw	0
   634   00091C  6E20               	movwf	(___awdiv@quotient+1)^0,c
   635   00091E  0E00               	movlw	0
   636   000920  6E1F               	movwf	___awdiv@quotient^0,c
   637   000922  501B               	movf	___awdiv@divisor^0,w,c
   638   000924  101C               	iorwf	(___awdiv@divisor+1)^0,w,c
   639   000926  B4D8               	btfsc	status,2,c
   640   000928  EF98  F004         	goto	u151
   641   00092C  EF9A  F004         	goto	u150
   642   000930                     u151:
   643   000930  EFC2  F004         	goto	l1056
   644   000934                     u150:
   645   000934  0E01               	movlw	1
   646   000936  6E1D               	movwf	___awdiv@counter^0,c
   647   000938  EFA2  F004         	goto	l1042
   648   00093C                     l1040:
   649   00093C  90D8               	bcf	status,0,c
   650   00093E  361B               	rlcf	___awdiv@divisor^0,f,c
   651   000940  361C               	rlcf	(___awdiv@divisor+1)^0,f,c
   652   000942  2A1D               	incf	___awdiv@counter^0,f,c
   653   000944                     l1042:
   654   000944  AE1C               	btfss	(___awdiv@divisor+1)^0,7,c
   655   000946  EFA7  F004         	goto	u161
   656   00094A  EFA9  F004         	goto	u160
   657   00094E                     u161:
   658   00094E  EF9E  F004         	goto	l1040
   659   000952                     u160:
   660   000952                     l1044:
   661   000952  90D8               	bcf	status,0,c
   662   000954  361F               	rlcf	___awdiv@quotient^0,f,c
   663   000956  3620               	rlcf	(___awdiv@quotient+1)^0,f,c
   664   000958  501B               	movf	___awdiv@divisor^0,w,c
   665   00095A  5C19               	subwf	___awdiv@dividend^0,w,c
   666   00095C  501C               	movf	(___awdiv@divisor+1)^0,w,c
   667   00095E  581A               	subwfb	(___awdiv@dividend+1)^0,w,c
   668   000960  A0D8               	btfss	status,0,c
   669   000962  EFB5  F004         	goto	u171
   670   000966  EFB7  F004         	goto	u170
   671   00096A                     u171:
   672   00096A  EFBC  F004         	goto	l1052
   673   00096E                     u170:
   674   00096E  501B               	movf	___awdiv@divisor^0,w,c
   675   000970  5E19               	subwf	___awdiv@dividend^0,f,c
   676   000972  501C               	movf	(___awdiv@divisor+1)^0,w,c
   677   000974  5A1A               	subwfb	(___awdiv@dividend+1)^0,f,c
   678   000976  801F               	bsf	___awdiv@quotient^0,0,c
   679   000978                     l1052:
   680   000978  90D8               	bcf	status,0,c
   681   00097A  321C               	rrcf	(___awdiv@divisor+1)^0,f,c
   682   00097C  321B               	rrcf	___awdiv@divisor^0,f,c
   683   00097E  2E1D               	decfsz	___awdiv@counter^0,f,c
   684   000980  EFA9  F004         	goto	l1044
   685   000984                     l1056:
   686   000984  501E               	movf	___awdiv@sign^0,w,c
   687   000986  B4D8               	btfsc	status,2,c
   688   000988  EFC8  F004         	goto	u181
   689   00098C  EFCA  F004         	goto	u180
   690   000990                     u181:
   691   000990  EFCE  F004         	goto	l1060
   692   000994                     u180:
   693   000994  6C1F               	negf	___awdiv@quotient^0,c
   694   000996  1E20               	comf	(___awdiv@quotient+1)^0,f,c
   695   000998  B0D8               	btfsc	status,0,c
   696   00099A  2A20               	incf	(___awdiv@quotient+1)^0,f,c
   697   00099C                     l1060:
   698   00099C  C01F  F019         	movff	___awdiv@quotient,?___awdiv
   699   0009A0  C020  F01A         	movff	___awdiv@quotient+1,?___awdiv+1
   700   0009A4  0012               	return		;funcret
   701   0009A6                     __end_of___awdiv:
   702                           	callstack 0
   703                           
   704 ;; *************** function _lcd_init *****************
   705 ;; Defined at:
   706 ;;		line 57 in file "../../../Documents/P2/AULAPICSIM4-4/lcd.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;		None
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2, status,0, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   720 ;;      Params:         0       0       0       0       0       0       0       0       0
   721 ;;      Locals:         0       0       0       0       0       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0       0       0       0       0
   723 ;;      Totals:         0       0       0       0       0       0       0       0       0
   724 ;;Total ram usage:        0 bytes
   725 ;; Hardware stack levels used: 1
   726 ;; Hardware stack levels required when called: 2
   727 ;; This function calls:
   728 ;;		_atraso_ms
   729 ;;		_lcd_cmd
   730 ;; This function is called by:
   731 ;;		_main
   732 ;; This function uses a non-reentrant model
   733 ;;
   734                           
   735                           	psect	text4
   736   000A08                     __ptext4:
   737                           	callstack 0
   738   000A08                     _lcd_init:
   739                           	callstack 28
   740   000A08                     
   741                           ;lcd.c: 59: PORTEbits.RE1=0;
   742   000A08  9284               	bcf	132,1,c	;volatile
   743                           
   744                           ;lcd.c: 60: PORTEbits.RE2=0;
   745   000A0A  9484               	bcf	132,2,c	;volatile
   746   000A0C                     
   747                           ;lcd.c: 61: atraso_ms(20);
   748   000A0C  0E00               	movlw	0
   749   000A0E  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   750   000A10  0E14               	movlw	20
   751   000A12  6E19               	movwf	atraso_ms@valor^0,c
   752   000A14  EC32  F005         	call	_atraso_ms	;wreg free
   753   000A18                     
   754                           ;lcd.c: 62: PORTEbits.RE1=1;
   755   000A18  8284               	bsf	132,1,c	;volatile
   756                           
   757                           ;lcd.c: 64: lcd_cmd(0x38);
   758   000A1A  0E38               	movlw	56
   759   000A1C  EC6B  F005         	call	_lcd_cmd
   760                           
   761                           ;lcd.c: 65: atraso_ms(5);
   762   000A20  0E00               	movlw	0
   763   000A22  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   764   000A24  0E05               	movlw	5
   765   000A26  6E19               	movwf	atraso_ms@valor^0,c
   766   000A28  EC32  F005         	call	_atraso_ms	;wreg free
   767                           
   768                           ;lcd.c: 66: lcd_cmd(0x38);
   769   000A2C  0E38               	movlw	56
   770   000A2E  EC6B  F005         	call	_lcd_cmd
   771                           
   772                           ;lcd.c: 67: atraso_ms(1);
   773   000A32  0E00               	movlw	0
   774   000A34  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   775   000A36  0E01               	movlw	1
   776   000A38  6E19               	movwf	atraso_ms@valor^0,c
   777   000A3A  EC32  F005         	call	_atraso_ms	;wreg free
   778                           
   779                           ;lcd.c: 68: lcd_cmd(0x38);
   780   000A3E  0E38               	movlw	56
   781   000A40  EC6B  F005         	call	_lcd_cmd
   782                           
   783                           ;lcd.c: 69: lcd_cmd(0x08);
   784   000A44  0E08               	movlw	8
   785   000A46  EC6B  F005         	call	_lcd_cmd
   786                           
   787                           ;lcd.c: 70: lcd_cmd(0x0F);
   788   000A4A  0E0F               	movlw	15
   789   000A4C  EC6B  F005         	call	_lcd_cmd
   790                           
   791                           ;lcd.c: 71: lcd_cmd(0x01);
   792   000A50  0E01               	movlw	1
   793   000A52  EC6B  F005         	call	_lcd_cmd
   794                           
   795                           ;lcd.c: 72: lcd_cmd(0x38);
   796   000A56  0E38               	movlw	56
   797   000A58  EC6B  F005         	call	_lcd_cmd
   798                           
   799                           ;lcd.c: 73: lcd_cmd(0x80);
   800   000A5C  0E80               	movlw	128
   801   000A5E  EC6B  F005         	call	_lcd_cmd
   802   000A62  0012               	return		;funcret
   803   000A64                     __end_of_lcd_init:
   804                           	callstack 0
   805                           
   806 ;; *************** function _lcd_cmd *****************
   807 ;; Defined at:
   808 ;;		line 35 in file "../../../Documents/P2/AULAPICSIM4-4/lcd.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  val             1    wreg     unsigned char 
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  val             1    5[COMRAM] unsigned char 
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0, cstack
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         0       0       0       0       0       0       0       0       0
   823 ;;      Locals:         1       0       0       0       0       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0       0       0       0       0
   825 ;;      Totals:         1       0       0       0       0       0       0       0       0
   826 ;;Total ram usage:        1 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; Hardware stack levels required when called: 1
   829 ;; This function calls:
   830 ;;		_atraso_ms
   831 ;;		_lcd_wr
   832 ;; This function is called by:
   833 ;;		_special_char
   834 ;;		_main
   835 ;;		_lcd_init
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           	psect	text5
   840   000AD6                     __ptext5:
   841                           	callstack 0
   842   000AD6                     _lcd_cmd:
   843                           	callstack 28
   844                           
   845                           ;incstack = 0
   846                           ;lcd_cmd@val stored from wreg
   847   000AD6  6E1E               	movwf	lcd_cmd@val^0,c
   848   000AD8                     
   849                           ;lcd.c: 37: PORTEbits.RE1=1;
   850   000AD8  8284               	bsf	132,1,c	;volatile
   851   000ADA                     
   852                           ;lcd.c: 38: lcd_wr(val);
   853   000ADA  501E               	movf	lcd_cmd@val^0,w,c
   854   000ADC  EC9F  F005         	call	_lcd_wr
   855   000AE0                     
   856                           ;lcd.c: 39: PORTEbits.RE2=0;
   857   000AE0  9484               	bcf	132,2,c	;volatile
   858   000AE2                     
   859                           ;lcd.c: 40: atraso_ms(3);
   860   000AE2  0E00               	movlw	0
   861   000AE4  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   862   000AE6  0E03               	movlw	3
   863   000AE8  6E19               	movwf	atraso_ms@valor^0,c
   864   000AEA  EC32  F005         	call	_atraso_ms	;wreg free
   865   000AEE                     
   866                           ;lcd.c: 41: PORTEbits.RE1=0;
   867   000AEE  9284               	bcf	132,1,c	;volatile
   868   000AF0                     
   869                           ;lcd.c: 42: atraso_ms(3);
   870   000AF0  0E00               	movlw	0
   871   000AF2  6E1A               	movwf	(atraso_ms@valor+1)^0,c
   872   000AF4  0E03               	movlw	3
   873   000AF6  6E19               	movwf	atraso_ms@valor^0,c
   874   000AF8  EC32  F005         	call	_atraso_ms	;wreg free
   875   000AFC                     
   876                           ;lcd.c: 43: PORTEbits.RE1=1;
   877   000AFC  8284               	bsf	132,1,c	;volatile
   878   000AFE  0012               	return		;funcret
   879   000B00                     __end_of_lcd_cmd:
   880                           	callstack 0
   881                           
   882 ;; *************** function _lcd_wr *****************
   883 ;; Defined at:
   884 ;;		line 30 in file "../../../Documents/P2/AULAPICSIM4-4/lcd.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;  val             1    wreg     unsigned char 
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  val             1    0[COMRAM] unsigned char 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   898 ;;      Params:         0       0       0       0       0       0       0       0       0
   899 ;;      Locals:         1       0       0       0       0       0       0       0       0
   900 ;;      Temps:          0       0       0       0       0       0       0       0       0
   901 ;;      Totals:         1       0       0       0       0       0       0       0       0
   902 ;;Total ram usage:        1 bytes
   903 ;; Hardware stack levels used: 1
   904 ;; This function calls:
   905 ;;		Nothing
   906 ;; This function is called by:
   907 ;;		_lcd_cmd
   908 ;;		_lcd_dat
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text6
   913   000B3E                     __ptext6:
   914                           	callstack 0
   915   000B3E                     _lcd_wr:
   916                           	callstack 28
   917                           
   918                           ;incstack = 0
   919                           ;lcd_wr@val stored from wreg
   920   000B3E  6E19               	movwf	lcd_wr@val^0,c
   921   000B40                     
   922                           ;lcd.c: 32: PORTD=val;
   923   000B40  C019  FF83         	movff	lcd_wr@val,3971	;volatile
   924   000B44  0012               	return		;funcret
   925   000B46                     __end_of_lcd_wr:
   926                           	callstack 0
   927                           
   928 ;; *************** function _atraso_ms *****************
   929 ;; Defined at:
   930 ;;		line 26 in file "../../../Documents/P2/AULAPICSIM4-4/atraso.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;  valor           2    0[COMRAM] unsigned int 
   933 ;; Auto vars:     Size  Location     Type
   934 ;;  i               2    2[COMRAM] unsigned int 
   935 ;;  j               1    4[COMRAM] unsigned char 
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg, status,2, status,0
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   945 ;;      Params:         2       0       0       0       0       0       0       0       0
   946 ;;      Locals:         3       0       0       0       0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0       0       0       0       0
   948 ;;      Totals:         5       0       0       0       0       0       0       0       0
   949 ;;Total ram usage:        5 bytes
   950 ;; Hardware stack levels used: 1
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_main
   955 ;;		_lcd_cmd
   956 ;;		_lcd_dat
   957 ;;		_lcd_init
   958 ;; This function uses a non-reentrant model
   959 ;;
   960                           
   961                           	psect	text7
   962   000A64                     __ptext7:
   963                           	callstack 0
   964   000A64                     _atraso_ms:
   965                           	callstack 28
   966   000A64                     
   967                           ;atraso.c: 28: unsigned int i;;atraso.c: 29: unsigned char j;;atraso.c: 32: for (i =0; i
      +                          < (valor); i++)
   968   000A64  0E00               	movlw	0
   969   000A66  6E1C               	movwf	(atraso_ms@i+1)^0,c
   970   000A68  0E00               	movlw	0
   971   000A6A  6E1B               	movwf	atraso_ms@i^0,c
   972   000A6C  EF4A  F005         	goto	l988
   973   000A70                     l976:
   974                           
   975                           ;atraso.c: 33: {;atraso.c: 35: for (j =0 ; j < 200; j++)
   976   000A70  0E00               	movlw	0
   977   000A72  6E1D               	movwf	atraso_ms@j^0,c
   978   000A74                     l41:
   979   000A74  0000               	nop		;# 
   980   000A76  0000               	nop		;# 
   981   000A78  0000               	nop		;# 
   982   000A7A  0000               	nop		;# 
   983   000A7C  0000               	nop		;# 
   984   000A7E  2A1D               	incf	atraso_ms@j^0,f,c
   985   000A80  0EC7               	movlw	199
   986   000A82  641D               	cpfsgt	atraso_ms@j^0,c
   987   000A84  EF46  F005         	goto	u111
   988   000A88  EF48  F005         	goto	u110
   989   000A8C                     u111:
   990   000A8C  EF3A  F005         	goto	l41
   991   000A90                     u110:
   992   000A90  4A1B               	infsnz	atraso_ms@i^0,f,c
   993   000A92  2A1C               	incf	(atraso_ms@i+1)^0,f,c
   994   000A94                     l988:
   995   000A94  5019               	movf	atraso_ms@valor^0,w,c
   996   000A96  5C1B               	subwf	atraso_ms@i^0,w,c
   997   000A98  501A               	movf	(atraso_ms@valor+1)^0,w,c
   998   000A9A  581C               	subwfb	(atraso_ms@i+1)^0,w,c
   999   000A9C  A0D8               	btfss	status,0,c
  1000   000A9E  EF53  F005         	goto	u121
  1001   000AA2  EF55  F005         	goto	u120
  1002   000AA6                     u121:
  1003   000AA6  EF38  F005         	goto	l976
  1004   000AAA                     u120:
  1005   000AAA  0012               	return		;funcret
  1006   000AAC                     __end_of_atraso_ms:
  1007                           	callstack 0
  1008                           
  1009                           	psect	smallconst
  1010   000800                     __psmallconst:
  1011                           	callstack 0
  1012   000800  00                 	db	0
  1013   000801  00                 	db	0	; dummy byte at the end
  1014   000000                     
  1015                           	psect	rparam
  1016   000000                     
  1017                           	psect	config
  1018                           
  1019                           ;Config register CONFIG1L @ 0x300000
  1020                           ;	PLL Prescaler Selection bits
  1021                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1022                           ;	System Clock Postscaler Selection bits
  1023                           ;	CPUDIV = OSC2_PLL3, [Primary Oscillator Src: /2][96 MHz PLL Src: /3]
  1024                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1025                           ;	USBDIV = 2, USB clock source comes from the 96 MHz PLL divided by 2
  1026   300000                     	org	3145728
  1027   300000  29                 	db	41
  1028                           
  1029                           ;Config register CONFIG1H @ 0x300001
  1030                           ;	Oscillator Selection bits
  1031                           ;	FOSC = EC_EC, EC oscillator, CLKO function on RA6 (EC)
  1032                           ;	Fail-Safe Clock Monitor Enable bit
  1033                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1034                           ;	Internal/External Oscillator Switchover bit
  1035                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1036   300001                     	org	3145729
  1037   300001  05                 	db	5
  1038                           
  1039                           ;Config register CONFIG2L @ 0x300002
  1040                           ;	Power-up Timer Enable bit
  1041                           ;	PWRT = ON, PWRT enabled
  1042                           ;	Brown-out Reset Enable bits
  1043                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1044                           ;	Brown-out Reset Voltage bits
  1045                           ;	BORV = 3, Minimum setting 2.05V
  1046                           ;	USB Voltage Regulator Enable bit
  1047                           ;	VREGEN = OFF, USB voltage regulator disabled
  1048   300002                     	org	3145730
  1049   300002  18                 	db	24
  1050                           
  1051                           ;Config register CONFIG2H @ 0x300003
  1052                           ;	Watchdog Timer Enable bit
  1053                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1054                           ;	Watchdog Timer Postscale Select bits
  1055                           ;	WDTPS = 32768, 1:32768
  1056   300003                     	org	3145731
  1057   300003  1E                 	db	30
  1058                           
  1059                           ; Padding undefined space
  1060   300004                     	org	3145732
  1061   300004  FF                 	db	255
  1062                           
  1063                           ;Config register CONFIG3H @ 0x300005
  1064                           ;	CCP2 MUX bit
  1065                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1066                           ;	PORTB A/D Enable bit
  1067                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1068                           ;	Low-Power Timer 1 Oscillator Enable bit
  1069                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1070                           ;	MCLR Pin Enable bit
  1071                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1072   300005                     	org	3145733
  1073   300005  81                 	db	129
  1074                           
  1075                           ;Config register CONFIG4L @ 0x300006
  1076                           ;	Stack Full/Underflow Reset Enable bit
  1077                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1078                           ;	Single-Supply ICSP Enable bit
  1079                           ;	LVP = OFF, Single-Supply ICSP disabled
  1080                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1081                           ;	ICPRT = OFF, ICPORT disabled
  1082                           ;	Extended Instruction Set Enable bit
  1083                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1084                           ;	Background Debugger Enable bit
  1085                           ;	DEBUG = 0x1, unprogrammed default
  1086   300006                     	org	3145734
  1087   300006  80                 	db	128
  1088                           
  1089                           ; Padding undefined space
  1090   300007                     	org	3145735
  1091   300007  FF                 	db	255
  1092                           
  1093                           ;Config register CONFIG5L @ 0x300008
  1094                           ;	Code Protection bit
  1095                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1096                           ;	Code Protection bit
  1097                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1098                           ;	Code Protection bit
  1099                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1100                           ;	Code Protection bit
  1101                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1102   300008                     	org	3145736
  1103   300008  0F                 	db	15
  1104                           
  1105                           ;Config register CONFIG5H @ 0x300009
  1106                           ;	Boot Block Code Protection bit
  1107                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1108                           ;	Data EEPROM Code Protection bit
  1109                           ;	CPD = OFF, Data EEPROM is not code-protected
  1110   300009                     	org	3145737
  1111   300009  C0                 	db	192
  1112                           
  1113                           ;Config register CONFIG6L @ 0x30000A
  1114                           ;	Write Protection bit
  1115                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1116                           ;	Write Protection bit
  1117                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1118                           ;	Write Protection bit
  1119                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1120                           ;	Write Protection bit
  1121                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1122   30000A                     	org	3145738
  1123   30000A  0F                 	db	15
  1124                           
  1125                           ;Config register CONFIG6H @ 0x30000B
  1126                           ;	Configuration Register Write Protection bit
  1127                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1128                           ;	Boot Block Write Protection bit
  1129                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1130                           ;	Data EEPROM Write Protection bit
  1131                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1132   30000B                     	org	3145739
  1133   30000B  E0                 	db	224
  1134                           
  1135                           ;Config register CONFIG7L @ 0x30000C
  1136                           ;	Table Read Protection bit
  1137                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1138                           ;	Table Read Protection bit
  1139                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1140                           ;	Table Read Protection bit
  1141                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1142                           ;	Table Read Protection bit
  1143                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1144   30000C                     	org	3145740
  1145   30000C  0F                 	db	15
  1146                           
  1147                           ;Config register CONFIG7H @ 0x30000D
  1148                           ;	Boot Block Table Read Protection bit
  1149                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1150   30000D                     	org	3145741
  1151   30000D  40                 	db	64
  1152                           tosu	equ	0xFFF
  1153                           tosh	equ	0xFFE
  1154                           tosl	equ	0xFFD
  1155                           stkptr	equ	0xFFC
  1156                           pclatu	equ	0xFFB
  1157                           pclath	equ	0xFFA
  1158                           pcl	equ	0xFF9
  1159                           tblptru	equ	0xFF8
  1160                           tblptrh	equ	0xFF7
  1161                           tblptrl	equ	0xFF6
  1162                           tablat	equ	0xFF5
  1163                           prodh	equ	0xFF4
  1164                           prodl	equ	0xFF3
  1165                           indf0	equ	0xFEF
  1166                           postinc0	equ	0xFEE
  1167                           postdec0	equ	0xFED
  1168                           preinc0	equ	0xFEC
  1169                           plusw0	equ	0xFEB
  1170                           fsr0h	equ	0xFEA
  1171                           fsr0l	equ	0xFE9
  1172                           wreg	equ	0xFE8
  1173                           indf1	equ	0xFE7
  1174                           postinc1	equ	0xFE6
  1175                           postdec1	equ	0xFE5
  1176                           preinc1	equ	0xFE4
  1177                           plusw1	equ	0xFE3
  1178                           fsr1h	equ	0xFE2
  1179                           fsr1l	equ	0xFE1
  1180                           bsr	equ	0xFE0
  1181                           indf2	equ	0xFDF
  1182                           postinc2	equ	0xFDE
  1183                           postdec2	equ	0xFDD
  1184                           preinc2	equ	0xFDC
  1185                           plusw2	equ	0xFDB
  1186                           fsr2h	equ	0xFDA
  1187                           fsr2l	equ	0xFD9
  1188                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    special_char@data	PTR unsigned char  size(1) Largest target is 8
		 -> data1(COMRAM[8]), data2(COMRAM[8]), data3(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_special_char
    _special_char->___awdiv
    _lcd_dat->_atraso_ms
    _lcd_init->_lcd_cmd
    _lcd_cmd->_atraso_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8836
                          _atraso_ms
                            _lcd_cmd
                           _lcd_init
                       _special_char
 ---------------------------------------------------------------------------------
 (1) _special_char                                         5     3      2    4124
                                              8 COMRAM     5     3      2
                            ___awdiv
                            _lcd_cmd
                            _lcd_dat
 ---------------------------------------------------------------------------------
 (2) _lcd_dat                                              1     1      0    1200
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             0     0      0    2356
                          _atraso_ms
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_cmd                                              1     1      0    1200
                                              5 COMRAM     1     1      0
                          _atraso_ms
                             _lcd_wr
 ---------------------------------------------------------------------------------
 (3) _lcd_wr                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _atraso_ms                                            5     3      2    1156
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _atraso_ms
   _lcd_cmd
     _atraso_ms
     _lcd_wr
   _lcd_init
     _atraso_ms
     _lcd_cmd
   _special_char
     ___awdiv
     _lcd_cmd
     _lcd_dat
       _atraso_ms
       _lcd_wr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      D      25       1       38.9%
BITBIGSFRhh         3E      0       0      21        0.0%
BITBIGSFRhl         2A      0       0      22        0.0%
BITBIGSFRlll        23      0       0      25        0.0%
BITBIGSFRllh         E      0       0      24        0.0%
BITBIGSFRlh          1      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      25       3        0.0%
DATA                 0      0      25       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Jun 05 20:35:38 2024

                     l41 0A74                       l44 0AAA                       l28 0A06  
                     l53 0B44                       l62 0A62                       l56 0AFE  
                     l59 0AD4             ___awdiv@sign 001E                      l302 09A4  
                    l982 0A7E                      l974 0A64                      l990 0B40  
                    l984 0A80                      l976 0A70                      l992 0AD8  
                    l986 0A90                      l994 0ADA                      l988 0A94  
                    l996 0AE0                      l998 0AE2                      u110 0A90  
                    u111 0A8C                      u120 0AAA                      u121 0AA6  
                    u130 08F4                      u210 09E2                      u131 08F0  
                    u211 09DE                      u140 090E                      u141 090A  
                    u150 0934                      u151 0930                      u160 0952  
                    u161 094E                      u170 096E                      u171 096A  
                    u180 0994                      u181 0990                     l1000 0AEE  
                   l1002 0AF0                     l1010 0AB6                     l1004 0AFC  
                   l1020 08E2                     l1012 0AB8                     l1030 090E  
                   l1022 08E6                     l1014 0AC4                     l1006 0AAE  
                   l1040 093C                     l1032 0916                     l1024 08F4  
                   l1016 0AC6                     l1008 0AB0                     l1050 0976  
                   l1042 0944                     l1034 091A                     l1026 08FC  
                   l1018 0AD2                     l1060 099C                     l1052 0978  
                   l1044 0952                     l1036 0922                     l1028 0900  
                   l1140 09CC                     l1132 09A8                     l1054 097E  
                   l1046 0958                     l1038 0934                     l1142 09E2  
                   l1134 09B0                     l1150 0814                     l1080 0A18  
                   l1048 096E                     l1056 0984                     l1136 09BA  
                   l1160 0848                     l1152 081A                     l1144 0802  
                   l1058 0994                     l1138 09C8                     l1170 0880  
                   l1162 0854                     l1154 0820                     l1146 080A  
                   l1076 0A08                     l1180 08C2                     l1172 088E  
                   l1164 0862                     l1156 082E                     l1148 0810  
                   l1078 0A0C                     l1182 08CE                     l1174 089A  
                   l1166 086E                     l1158 083A                     l1184 08D4  
                   l1176 08A8                     l1168 0874                     l1178 08B4  
                   _main 0802                     fsr2h 0FDA                     indf2 0FDF  
                   fsr1l 0FE1                     fsr2l 0FD9                     start 0000  
           ___param_bank 0000                    ?_main 0019          __end_of___awdiv 09A6  
        ___awdiv@divisor 001B          ___awdiv@counter 001D                    _PORTD 0F83  
                  _TRISD 0F95                    _TRISE 0F96          __end_of_lcd_dat 0AD6  
        __end_of_lcd_cmd 0B00                    _data1 0011                    _data2 0009  
                  _data3 0001      special_char@lcd_loc 0021                    tablat 0FF5  
                  status 0FD8          __initialization 0B00             __end_of_main 08E2  
                 ??_main 0026            __activetblptr 0000                   _ADCON1 0FC1  
       ___awdiv@dividend 0019                   _TRISB0 7C98         __end_of_lcd_init 0A64  
              ??___awdiv 001D                   _lcd_wr 0B3E         ___awdiv@quotient 001F  
                 isa$std 0001                ??_lcd_dat 001E                ??_lcd_cmd 001E  
           __pdataCOMRAM 0001             __mediumconst 0000                   tblptrh 0FF7  
                 tblptrl 0FF6                   tblptru 0FF8               __accesstop 0060  
__end_of__initialization 0B20            ___rparam_used 0001           __pcstackCOMRAM 0019  
                ?_lcd_wr 0019                ?_lcd_init 0019                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 08E2        __end_of_atraso_ms 0AAC  
           __psmallconst 0800                  __pcinit 0B00                  __ramtop 0800  
                __ptext0 0802                  __ptext1 09A6                  __ptext2 0AAC  
                __ptext3 08E2                  __ptext4 0A08                  __ptext5 0AD6  
                __ptext6 0B3E                  __ptext7 0A64                  _lcd_dat 0AAC  
                _lcd_cmd 0AD6    special_char@cgram_loc 0023               ??_lcd_init 001F  
   end_of_initialization 0B20            ?_special_char 0021                  postdec1 0FE5  
                postinc0 0FEE                _PORTEbits 0F84               lcd_dat@val 001E  
             lcd_cmd@val 001E           ??_special_char 0023               atraso_ms@i 001B  
             atraso_ms@j 001D            __pidataCOMRAM 0B26           __end_of_lcd_wr 0B46  
    start_initialization 0B00                 ??_lcd_wr 0019                 ?___awdiv 0019  
               ?_lcd_dat 0019                 ?_lcd_cmd 0019                _atraso_ms 0A64  
            __smallconst 0800     __end_of_special_char 0A08           atraso_ms@valor 0019  
             ?_atraso_ms 0019                lcd_wr@val 0019                copy_data0 0B14  
               __Hrparam 0000                 __Lrparam 0000                 _lcd_init 0A08  
               isa$xinst 0000         special_char@data 0022              ??_atraso_ms 001B  
           _special_char 09A6            special_char@j 0024  
